package com.jg.explorer.design;

import com.alibaba.fastjson.JSONObject;
import com.jg.common.result.ResultCode;
import com.jg.explorer.BaseServlet;
import com.jg.explorer.HttpRequestType;
import com.jg.identification.Company;
import com.jg.identification.User;
import com.jg.workflow.process.module.Module;
import com.jg.workflow.process.module.ModuleImpl;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import javax.servlet.annotation.WebServlet;
import java.util.Date;
import java.util.List;

import static com.jg.common.result.ResultCode.*;
import static com.jg.workflow.process.module.ModuleFactory.MODULE_FACTORY;

/**
 * 提供流程设计WEB接口
 * <p>
 * create by 17/4/26.
 *
 * @author yimin
 */
@WebServlet(name = "FormDesign", urlPatterns = "/FormDesign")
public class FormDesign extends BaseServlet {
	private static final Logger log = LogManager.getLogger(FormDesign.class.getName());

	@Override
	protected ResultCode execute(HttpRequestType type, ServletData servletData) {
		Company company = (Company) servletData.get(COMPANY);
		JSONObject jsonData = (JSONObject) servletData.get(JSON_DATA);

		switch (type) {
			case list:
				return list(jsonData, company, servletData);
			case load:
				return load(jsonData);
			case modify:
			case save:
				return saveToModule(jsonData, company, servletData);
			default:
				log.error("未找到此类型定义的操作。type:" + type.name());
				return ResultCode.UNKNOW;
		}
	}

	private ResultCode list(JSONObject jsonData, Company company, ServletData servletData) {
		User user = (User) servletData.get(USER);
		List<ModuleImpl> modules = MODULE_FACTORY.getAllObjects(user);

		StringBuilder builder = new StringBuilder();
		for (ModuleImpl module : modules) {
			if (builder.length() > 0) {
				builder.append(",");
			}
			builder.append("{\"id\":").append(module.get(ID).toString()).append(",\"name\":\"").append((String) module.get("module_name")).append("\"}");
		}
		builder.insert(0, "\":[").insert(0, RESULTLIST).insert(0, "{\"").append("]}");

		return SUCCESS.clone().setValue(builder.toString());
	}

	private ResultCode saveToModule(JSONObject jsonData, Company company, ServletData servletData) {
		ModuleImpl module;

		Integer moduleId = jsonData.getInteger("module_id");
		JSONObject structure = (JSONObject) jsonData.get(CONTENT);

		if (moduleId != null) {
			module = MODULE_FACTORY.getObject(ID, moduleId);
		} else {
			module = MODULE_FACTORY.getNewObject((User) servletData.get(USER));
			module.setIdBySequence();
			module.set("company_id", company.getId());
			module.set("create_time", new Date(System.currentTimeMillis()));
			module.set("create_user", ((User) servletData.get(USER)).getId());

			structure.put("version", 0);
			structure.put("module_id", module.getId());
			structure.put("module_name", jsonData.get("module_name"));
		}

		JSONObject oldStru = module.get("form_structure");
		structure.put("version", oldStru.getInteger("version") + 1);

		module.set("module_name", jsonData.get("module_name"));
		module.set("update_time", new Date(System.currentTimeMillis()));
		module.set("update_user", ((User) servletData.get(USER)).getId());
		module.set("form_structure", structure);

		module.flush();

		return new ResultCode().put(ID, module.get(ID));
	}

	private ResultCode load(JSONObject jsonData) {
		Integer moduleId = jsonData.getInteger(ID);
		if (moduleId == null) {
			return NOPARAMETER.clone().put("possible", ID);
		}

		Module module = MODULE_FACTORY.getObject(ID, moduleId);

		if (module == null) {
			return NOTFOUNDOBJECT;
		}

		return SUCCESS.clone().setValue(module.get("form_structure").toString());
	}

}
