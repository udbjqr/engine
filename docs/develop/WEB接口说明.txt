访问地址根目录：
http://192.168.1.198:8080/designServlet/

访问方式：post
参数方式：
传输内容： para:{type：请求类型,。。。。。}

所有返回值：
{
	'code' 返回值代码,
	'data': 返回值
}

流程定义：
url:processDefinition
列表：
{"type":"list"}
此列表仅返回版本号最大的可用的流程定义。

读一个流程的启动前结构：
{'type':'startstru','definitionId':225}
返回此流程启动前的模块信息，带着结构对象
{
  "code": 0,
  "data": {
    "module": {
      "module_name": "form",
      "form_structure": {
        "version": 10,
        "content": [
          {
            "id": "aoof5941494397006830",
            "type": 1,
            "title": "单行文本"
          },
          {
            "dict_name": "",
            "values": [
              {
                "label": "选项一",
                "value": 1
              },
              {
                "label": "选项二",
                "value": 2
              },
              {
                "label": "选项三",
                "value": 3
              }
            ],
            "id": "orm13r41494397008355",
            "type": 3,
            "title": "单选框"
          },
          {
            "values": [
              {
                "label": "年-月-日",
                "value": "YYYY-MM-DD"
              },
              {
                "label": "年-月-日 时:分",
                "value": "YYYY-MM-DD hh:mm"
              },
              {
                "label": "时:分",
                "value": "hh:mm"
              }
            ],
            "format": "YYYY-MM-DD",
            "id": "2ncnooo1494397009860",
            "type": 5,
            "title": "日期"
          }
        ]
      },
      "id": 215
    },
    "handle": 1
  },
  "message": "成功"
}

读明细：
{	"type":"load",	"definitionId":225}



流程设计：
url: FlowDesign
列表：
{"type":"list","moduleId":215}
修改一个流程定义：
{	"type":"save",	'name': 'name', 'type': 'save','id': 流程定义的Id，
	'description': 'description', 'view_information': 'view_information', 'content': JSON.parse(json)}

新增一个流程定义：
{	"type":"save",	'name': 'name', 'type': 'save',
	'description': 'description', 'view_information': 'view_information', 'content': JSON.parse(json)}

读：
{	"type":"load",	"modelId":225}
返回例：
{
  "code": 0,
  "data": {
    "model": {
      "id": 225,
      "name": "name",
      "category": "",
      "content": {
        "linkToPortIdProperty": "toPort",
        "name": "name",
        "linkDataArray": [
          {
            "visible": true,
            "fromPort": "B",
            "toPort": "T",
            "from": 1,
            "to": 2,
            "text": "这测试一下"
          },
          {
            "fromPort": "B",
            "toPort": "T",
            "from": -2,
            "to": 1
          },
          {
            "fromPort": "B",
            "toPort": "T",
            "from": 2,
            "to": -1,
            "points":
          }
        ],
        "nodeDataArray": [
          {
            "loc": "175 0",
            "text": "Start",
            "category": "Start",
            "key": -2
          },
          {
            "loc": "175 100",
            "module": 1,
            "assignees": "CurrentOperator",
            "handle": 1,
            "text": "申请",
            "category": "UserTask",
            "key": 1
          },
          {
            "loc": "175 200",
            "module": 1,
            "assignees": "R1",
            "handle": 2,
            "text": "确定",
            "category": "UserTask",
            "key": 2
          },
          {
            "loc": "170.99999999999994 310.9999999999997",
            "text": "End",
            "category": "End",
            "key": -1
          }
        ],
        "linkFromPortIdProperty": "fromPort",
        "class": "go.GraphLinksModel"
      },
      "view_information": "view_infomation",
      "company_id": 1,
      "description": "description",
      "flag": 1
    }
  },
  "message": "成功"
}

模块表单：
url：FormDesign
读：
	{'type':'load',
	'id':模型的id.}
保存：
	{'type':'save',
	'id':'id',
	'module_name':'模型名称'
	'content':模型表单的对象。}
列表：
	{'type':'list'}
	返回：
		{.....'data':[{'id':id,'name':module_name}]}
删除：
  {'type':'delete',
   	'id':'id'}
数据字典：
url:dict
读：
	{'type':'load',
	'id':id}
保存：
	{'type':'save',
	'id':'id',
	dict_name
	label
	value}
	说明： 新增无id外，其余都必须有。
	      同一个企业、同一个名称的 label 或 value都唯一
列表：
	'type':'list'
	返回：
		{'data': "list": [{"label": "男","value": "1"}]}


流程：
url:process

开始一个流程：
	{
		'type':'start',
		'definitionId':流程定义ID,
		'variable':{}  //根据启动前获得数据提供
	}
返回例子：
{
  "code": 0,
  "data": {"processId": 410 }}

读流程明细：
{'type':'load',"processId": 410}

得到我发起的正在运行的任务：
{'type':'MyLaunchProcessList'}

得到我发起的已经完成的任务：
{'type':'MyFinishProcessList'}

任务：
url:task
得到我的任务：
	{'type':'loadMyTasks'}
返回例子：
{"code": 0,
  "data": {
    "list": [{
        "id": 251,
        "execution_id": 350,
        "name": "节点2",
        "module_id": 1,
        "handle_id": 2
      }
    ]}}

执行任务操作：
{	"type":"handle",	"taskId":281,	"variable":{}}

读一个任务详细：
{	"type":"load",	"taskId":281}
返回：
{
  "code": 0,
  "data": {
    "task": {
      "id": 335,
      "execution_id": 434,
      "module_id": 1,
      "handle_id": 1,
      "due_time": "2017-05-11 14:57:57",
      "flag": 0,
      "definition_id": 1
    },
    "taskStructure": [
      {
        "isRequired": true,
        "isfillin": true,
        "id": "aoof5941494397006830",
        "type": 1,
        "title": "第一条",
        "value": "00"
      },
      {
        "isRequired": true,
        "isfillin": true,
        "dict_name": "规格",
        "values": [
          {
            "label": "800*600",
            "value": "1"
          },
          {
            "label": "1024*768",
            "value": "2"
          },
          {
            "label": "1920*1080",
            "value": "3"
          }
        ],
        "id": "orm13r41494397008355",
        "type": 3,
        "title": "单选框",
        "value": "1"
      }
    ],
    "Additional":["TurnDown","Pass"]
  },
  "message": "成功"
}

人员：
url:/user
列表：
{	"type":"list"}
	返回：
{
  "code": 0,
  "data": {
    "current": 3,
    "list": [
      {
        "label": "第一人",
        "value": 1
      },
      {
        "label": "第二人",
        "value": 2
      },
      {
        "label": "第三人",
        "value": 3
      },
      {
        "label": "第四人",
        "value": 4
      }
    ]
  },
  "message": "成功"
}
设置当前操作人：
{
	"type":"login",
	"userId":4
}
返回
{
  "code": 0,
  "data": {},
  "message": "成功"
}